#! /usr/bin/env python3

import argparse

import subprocess
import threading

import os
import errno

import tempfile
import shutil

gpoa = '/root/gpoa'

class gpupdate:
    _smb_cache = '/var/cache/samba/gpo_cache'
    _tmp_root = '/tmp/gpupdate'

    def __init__(self, user, domain, controller):
        self._gpos = []
        self._user = user
        self._domain = domain
        self._controller = controller
        try:
            os.makedirs(self._tmp_root)
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise
            pass
        self._temp_dir = self._mktmp('/tmp/gpupdate')

    def update(self):
        '''
        Update GPO cache.
        '''
        proc = subprocess.Popen(['net', 'ads', 'gpo', 'list', self._user], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        #output = subprocess.check_output(['net', 'ads', 'gpo', 'list', self.user])
        #print(output)
        thr = threading.Thread(target=self._parse_netads, args=(proc,))
        thr.start()
        thr.join()

        return self._fetch_gpos()

    def _parse_netads(self, proc):
        '''
        Parse output of `net ads gpo list Administrator` command.
        '''
        for line in iter(proc.stdout.readline, b''):
            decoded_line = line.decode('utf-8')
            if decoded_line.startswith('filesyspath') and line != b'filesyspath:\t\t(null)\n':
                self._gpos.append(self._strip_paths(decoded_line))


    def _fetch_gpos(self):
        '''
        Download GPO directories specified by their GUIDs using smbclient with Kerberos 5 authentication.
        '''
        retrieved_gpos = []
        for pol in self._gpos:
            policy_tmp_dir = os.path.join(self._temp_dir, pol)
            os.makedirs(policy_tmp_dir)
            smbclient_cmd = 'prompt OFF;recurse ON;cd {}/Policies/{};lcd {};mget *'.format(self._domain, pol, policy_tmp_dir)
            print('Executing: {}'.format(smbclient_cmd))
            retcode = subprocess.call('smbclient -k \'\\\\{}\\sysvol\' -N -c \'{}\''.format(self._controller, smbclient_cmd), shell=True)
            if retcode == 0:
                print('Successfully retrieved GPO: {}'.format(pol))
                self._2gpo_cache(policy_tmp_dir, pol)
                retrieved_gpos.append(pol)
            else:
                print('Unable to retrieve GPO: {}'.format(pol))
        return retrieved_gpos

    def _mktmp(self, tmp):
        '''
        Create temporary directory to download GPO
        '''
        try:
            os.makedirs(tmp)
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise
            pass
        return tempfile.mkdtemp(dir=tmp)

    def _strip_paths(self, policy_path):
        '''
        Strip newlines and extra symbols from paths.
        '''
        return policy_path[len('filesyspath:\t\t\\\\{}\\SysVol\\{}\\Policies\\'.format(self._domain, self._domain)):].strip()

    def _2gpo_cache(self, obj, pol):
        '''
        Move downloaded GPOs to /var/cache/samba/gpo_cache
        '''
        gpo_dest = os.path.join(self._smb_cache, self._domain.upper(), 'POLICIES', pol)
        shutil.rmtree(gpo_dest) # Remove destination GPO if exists
        shutil.move(obj, gpo_dest)

class hreg:
    _hreg_exe = '/root/hreg'
    _hreg_cache = '/var/cache/gpupdate'

    def __init__(self, cache_dir, domain, gpos, sid):
        self._cache_dir = cache_dir
        self._domain = domain
        self._gpos = gpos
        self._sid = sid
        self._temp_dir = os.path.join(self._hreg_cache, 'tmp')
        try:
            os.makedirs(self._temp_dir)
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise
            pass

    def to_fs(self):
        '''
        Transform policy files to file system representation for given domain
        '''
        dest = self._mktmp(self._temp_dir)
        for gpo in self._gpos:
            policy_file = os.path.join(self._cache_dir,
                self._domain.upper(),
                'POLICIES',
                gpo,
                'User',
                'Registry.pol')
            hreg_cmd = '{} apply {} {} -u {}'.format(self._hreg_exe, dest, policy_file, self._sid)
            subprocess.call(hreg_cmd, shell=True)
        # Move data to permanent cache
        permanent_cache = os.path.join(self._hreg_cache, self._sid)
        try:
            shutil.rmtree(permanent_cache)
        except OSError as exc:
            if exc.errno != errno.ENOENT:
                raise
            pass
        try:
            os.makedirs(permanent_cache)
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise
            pass
        for i in os.listdir(dest):
            shutil.move(os.path.join(dest, i), permanent_cache)
        shutil.rmtree(dest)

    def _mktmp(self, tmp):
        '''
        Create temporary directory for GPO VFS
        '''
        try:
            os.makedirs(tmp)
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise
            pass
        return tempfile.mkdtemp(dir=tmp)

class gpoa:
    _gpoa_exe = '/root/gpoa/gpoA/main.py'

    def __init__(self, sid):
        self._sid = sid

    def generate_scripts(self):
        gpoa_cmd = [self._gpoa_exe]
        output = subprocess.call(gpoa_cmd)

def wbinfo_getsid(domain, user):
    '''
    Get SID using wbinfo
    '''
    wbinfo_cmd = ['wbinfo', '-n', '{}\\{}'.format(domain.upper(), user)]
    output = subprocess.check_output(wbinfo_cmd)
    sid = output.split()[0].decode('utf-8')
    return sid

def machine_kinit():
    '''
    Perform kinit with machine credentials
    '''
    pass

def parse_cli_arguments():
    '''
    Command line argument parser
    '''
    argparser = argparse.ArgumentParser(description='Update group policies for the specified user')
    argparser.add_argument('-u',
        '--user',
        default='Administrator',
        help='Name of the user for GPO update')
    argparser.add_argument('-d',
        '--domain',
        default='domain.alt',
        help='Name of the AD domain for replication')
    argparser.add_argument('-c',
        '--controller',
        default='dc0',
        help='AD controller to connect to')
    argparser.add_argument('-p',
        '--password',
        help='Kerberos 5 password for the specified user')
    argparser.add_argument('-i',
        '--sid',
        help='Specify SID for User target')
    argparser.add_argument('-t',
        '--target',
        default='User',
        help='Computer or User')
    argparser.add_argument('-f',
        '--force',
        help='Reapply all policy settings')
    argparser.add_argument('-w',
        '--wait',
        default=600,
        help='Wait for specified number of seconds')
    argparser.add_argument('-l',
        '--logoff',
        help='Force logoff after settings are applied')
    argparser.add_argument('-b',
        '--boot',
        help='Force reboot after settings are applied')
    argparser.add_argument('-s',
        '--sync',
        help='Perform next GPO application synchronously')

    return argparser.parse_args()

def main():
    args = parse_cli_arguments()

    machine_kinit()
    updater = gpupdate(args.user, args.domain, args.controller)
    retrieved_gpos = updater.update()

    sid = wbinfo_getsid(args.domain, args.user)
    hreg_util = hreg('/var/cache/samba/gpo_cache', args.domain, retrieved_gpos, sid)
    hreg_util.to_fs()

    gpo_applier = gpoa(sid)
    gpo_applier.generate_scripts()

if __name__ == '__main__':
    main()

